// -----------------------------------------------------------
/*  inputs */
// -----------------------------------------------------------
/* Import Sass utils */
@use "../../style/sass/variables" as v;
@use "../../style/sass/mixins" as m;


@mixin label-top() {
	transform: translate(-(v.$input-padding), -1.9rem);
	font-size: 14px;
	color: v.$color-grey;
}

.input-group {
	position: relative;
	@include m.flex(
		/* $axis: (
			null,
			center,
		) */
	);
    @include m.border(v.$color-lightgrey);
	z-index: 0;
	font: inherit;
    &:focus-within,
    &:focus-within .input-group__btn{
        border-color: v.$color-focus;
    }
	&__label {
		@include m.position(
			absolute,
			calc(v.$input-padding + 1px)
		); // 1px for the border
		transition: all 0.5s ease-in-out;
		//display: block; // to make the uppercase works on ::first-letter
		padding-left: v.$input-padding;
		z-index: -1; // fix user focus of input
		font: 1rem Raleway;
		overflow: hidden;
		white-space: nowrap;
		text-overflow: ellipsis;
		&::first-letter {
			text-transform: uppercase;
		}
		&--top {
			@include label-top;
		}
		&--hide {
			visibility: hidden;
		}
	}
	&__control {
		width: 100%;
		//@include m.border(v.$color-lightgrey);
		padding: v.$input-padding;
		font: inherit;
		background-color: transparent;
		/* &:focus {
			border-color: #32a1ce;
		} */
		&:focus ~ label,
		&:valid ~ label,
		&[type="time"] ~ label {
			@include label-top;
		}
	}
    &__btn {
        @include m.border(v.$color-lightgrey, $positions:(left));
        @include m.centered();
        padding: 0.3rem;
        &:hover {
            background-color: v.$color-focus;
            > * {
                color:white;
            }
        }
    }
	input {
		&[type="time"],
		&[type="number"] {
			color: transparent;
			text-align: center;
			&:focus,
			&:valid {
				color: black;
			}
		}
		&[type="time"] {
			&::-webkit-calendar-picker-indicator {
				background: none; // chrome
			}
		}
		&[type="number"] {
			-moz-appearance: textfield; // firefox
			appearance: textfield; // firefox
			&::-webkit-inner-spin-button {
				-webkit-appearance: none; // chrome
			}
		}
	}
	textarea {
		resize: none;
	}
}

.input-group-row {
	@include m.grid((5px repeat(3, 1fr) 24px), $g: (0 0.5rem), $align: center);
	&--resizable {
		@include m.flex(
			$axis: (
				null,
				center,
			),
			$g: 0.5rem
		);
	}
	> div:first-of-type {
		grid-column: 2 / 5;
	}
	> div:nth-child(2) {
		margin-top: 1.5rem;
		grid-column: 2 / 3;
	}
	> div:nth-child(3) {
		margin-top: 1.5rem;
		grid-column: 3 / 5;
	}
	> button {
		grid-row: 1 / span 2;
		grid-column: 5 / 6;
	}
	&::before {
		@include m.before-after;
		grid-column: 1 / 2;
		grid-row: 1 / span 2;
		background-color: lighten(v.$color-blue, 50%);
		height: 100%;
	}
	@include m.desktop(785px) {
		@include m.flex();
		> div:first-of-type {
			flex: 3;
		}
		> div:nth-child(2) {
			flex: 1;
		}
		> div:nth-child(3) {
			flex: 2;
		}
		> div:nth-child(2),
		div:nth-child(3) {
			margin: 0;
		}
		&::before {
			display: none;
		}
	}
}

.input-group--resizable {
	display: inline-grid;
	grid-template-areas: "input";
	align-items: center;
	@include m.border(v.$color-lightgrey);
	padding: v.$input-resize-pad;
	&::after {
		content: attr(data-value) "";
		visibility: hidden;
		white-space: pre-wrap;
	}
	label {
		@include label-top;
		width: auto;
	}
	&::after,
	input,
	select,
	textarea {
		grid-area: input;
		width: auto;
		min-width: 1em;
		font: inherit;
		margin: 0;
		padding: 0;
		resize: none;
		background: none;
		appearance: none;
		border: none;
	}
}
